Classes & Template

A class is a collection of objects, and an object is defined as an instance of class possessing attributes. 
The object is an entity that has state and behavior.

e.g. if we have a class students, then it will only consist of students related data, such as subjects, names, attendance ratio, etc.


Instances
Constructor
Methods
Abstraction
Inheritance

As procedure-oriented programming focuses on functions, object-oriented programming stresses on objects.
An object is simply a collection of data and methods.

A class is a blueprint from which objects are created.


##object.__dict__ --> __dict__ is a attribute present inside a class and it returns dictionary

OOP allows the variables to be used at the class level or the instance level.

Instance variable: variables for which the value of the variable is different for every instance
Class variable: Class attributes are owned by the class directly, which means that they are not tied to any object or instance.

from instance we cant change the class variables, and if we want to change then it will create a new instance variable

Methods:
  A method is just like a function, with a def keyword and a single parameter in which the object's name has to be passed.
  Its purpose is to show all the details related to the object in a single go.
  
Self keyword:
The self keyword is used in the method to refer to the instance of the current class we are using.
The self keyword is passed as a parameter explicitly every time we define a method.

def read_number(self):
        print(self.num)
        
__init__ method:-
"__init__" is also called a constructor in object-oriented terminology. Whereas a constructor is defined as:
"Constructor in Python is used to assign values to the variables or data members of a class when an object is created."
#####CLass ko attributes dene ki tarike ko construcutor kehte hai
#####Jo bhi kaam karna chahte hai object banate time wo init fn karke deta hai.
#####Class ko jo hm aregument dete hai wo hmesa init ko jata hai


Class Methods:
Class methods take cls parameter that points to the class and not the object instance when the method is called.

class myClass:
    @classmethod
    def myfunc (cls, arg1, arg2, ...):
                          ....

myfunc defines the function that needs to be converted into a class method
returns: @classmethod returns a class method for function.

Because the class method only has access to the cls argument, it cannot modify the object instance state. 
However, class methods can still modify the class state that applies to all instances of the class. 
So a class method automatically recognizes a class, so the only parameter that remains to be passed is the function that needs conversion.

57) Class Methods As Alternative Constructors 
class Date:
    def __init__(self, year, month, day):
        self.year = year
        self.month = month
        self.day = day

    @classmethod 
    def from_dash(cls,string):
          return cls(*string.split("-"))

date1=Date.from_dash("2008-12-5")
print(date1.year)
#Output: 2008

58) Static Methods In Python
static method is bound to a class rather than the objects for that class.
we use the @staticmethod decorator, which is a built-in decorator.
Using a static method in a class, we permit it to be accessed only by the class objects or inside the class.
Unlike, class method, a static method cannot alter or change any variable value or state of the class.
Static methods do not have any knowledge related to the class.
we do not need the self or cls to be passed as the first argument in a static method.
class Student:
@staticmethod
    def myfunc():
        //Code to be executed

59) Abstraction and Encapsulation
    Abstraction refers to hiding unnecessary details to focus on the whole product instead of parts of the project separately.
    
60) Single Inheritence
61) Multiple Inheritance :
        In multiple inheritance, a class is derived from more than one class i.e. multiple base classes. 
        The child class, in this case, has features of both the parent classes."
        The order of placing the base classes is very important.
    Method Overriding:
        Override means having two methods that have the same name. They may perform same tasks or different tasks.
        When the same method defined in the parent class is also defined in the child class, the process is known as Method overriding.  
        
    few rules for Method overriding:
    The name of the child method should be the same as parents.
    Inheritance should be there, and we need to derive a child class from a parent class
    Both of their parameters should be the same. 
    
62) Multilevel Inheritance:
      A class that is already derived from another class is derived by a third class. 
      So in this way, the third class has all the other two former classes' features and functionalities.
      
63) Public/Protected(_)/Private(__)
    Public Access Modifier:
      In public, all the functions, variables, methods can be used publicly. Every other class can access them easily without any restriction.
      
    Protected Access Modifier:
      Its members and functions can only be accessed by the classes derived from it, i.e., its child class or classes. No other environment is permitted to access it. 
      To declare the data members as protected, we use a single underscore “_” sign before the data members of the class.
      e.g. class employee:
              def __init__(self, name, age):
                  self._name=name # protected attribute 
                  self._age=age # protected attribute
                  
    Private Access Modifier:
       The variables and functions can only be accessed within the class. The private restriction level is the highest for any class. 
       To declare the data members as private, we use a double underscore “_­_” sign before the data members of the class.
    Name mangling:
        _object._class__variable
        e.g. emp._Employee__pr
        
64) Polymorphism
65) Super() and Overriding In Classes
      The need for superclass arises when overriding is being done at a certain point in our code.
      Overriding occurs when a derived class or child class has the same method that has already been defined in the base or parent class.
      In the case of instance variables, the case is a little different. 
      When the method is called, the program will look for any instance variable having the same name as the one that is called in the child,
      then in the parent, and after that, it comes again into child class if not found.
67) Operator Overloading & Dunder Method (__repr__ & __str__)
68) Abstract base class
69) Setters & Property Decorators, deleter 
70) Object Introspection (type, id, dir, inspect module)
