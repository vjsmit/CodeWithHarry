An enumerate is a built-in function that provides an index to data structure elements, making iterations through them easier and simpler.

Syntax
enumerate(iterable, start=0)

When calling a simple enumeration function, we have to provide two parameters:
The data structure that we want to iterate
The index from where we want to start our iteration

Note: The iterable must be an object that supports iteration

list_1=["code","with","harry"]
for index,val in enumerate(list_1):
    print(index,val)
    
    
Example:
list_2 = ["Python", "Programming", "Is", "Fun"]
#Counter value starts from 5
result = enumerate(list_2, 5)
print(list(result))
We will get the following output:

[(5, 'Python'), (6, 'Programming'), (7, 'Is'), (8, 'Fun')]


If we do not provide the index, we want to start the iteration from then it automatically starts its iteration from zero index i.e., the beginning of the data structure.

Instead of returning a string, the enumerate function returns an object by adding the iterating counter value.
We can also convert the enumerator object into a list(), tuple(), set(), and many more.


Advantages of using Enumerate:
It is a built-in function 
It makes the code shorter
We do not have to keep count of the number of iterations
It makes the implementation of for loop simpler and cleaner
Lesser code so lessor chances of error and bugs
We can loop through string, tuple or objects using enumerate
We can start the iteration from anywhere within the data structure as we have the option of providing the starting index for iteration.

============================================================================================================================================
l1 = ["Bhindi", "Aloo", "chopsticks", "chowmein"]

# i = 1
# for item in l1:
#     if i%2 is not 0:
#         print(f"Jarvis please buy {item}")
#     i += 1

for index, item in enumerate(l1):
    if index%2==0:
        print(f"Jarvis please buy {item}")


  
