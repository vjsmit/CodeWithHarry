Anonymous function:

An anonymous function or lambda expression is a function definition that is not bound to an identifier (def).
The anonymous function is an inline function. 
The anonymous functions are created using a lambda operator and cannot contain multiple expressions.

def sum1(n1,n2,n3):
    print ('Sum of three values: ', n1+n2+n3)
sum1(10,20,30)

result = lambda n1, n2, n3: n1 + n2 + n3;
print ("Sum of three values : ", result( 10, 20, 30 ))


In the above code, we have created an anonymous function that adds three numbers. 

The function is stored in a variable named result.
The function can then be called using this variable. In the above code, the function has been called with 3 diff parameter values for the function call.

Anonymous functions can accept inputs and return the outputs, just like other functions do.
The main objective is that, when we need a function just once, it come in handy help reduce the number of lines of the code when compared to named Python functions

Significant Differences Between Lambda Expressions And Simple Functions:
Can be passed immediately with or without variables.
They are inline functions.
Automatic return of results.
There is neither a document string nor a name.


Python List sort():
Python has an in-built method i.e. sort(), which is used to sort the elements of the given list in a specified ascending or descending order.
There is also a built-in function i.e. sorted(), that builds a new sorted list from an iterable like list, dictionary, etc.

list.sort(key=myFunc ,reverse=True|False)

In the key parameter, we specify a function that is called on each list element before making comparisons. 
This is optional. False will sort the list in ascending order, and true will sort the list in descending order.
Default is reverse=False.
Sort() does not return any value, but it changes from the original list.

 ======================================================================================================
# Lambda functions or anonymous functions
# def add(a, b):
#     return a+b
#
# # minus = lambda x, y: x-y
#
# def minus(x, y):
#     return x-y
#
# print(minus(9, 4))


a =[[1, 14], [5, 6], [8,23]]
a.sort(key=lambda x:x[1])
print(a)
  

